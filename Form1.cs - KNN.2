using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Windows.Forms;
using System.Globalization;

namespace IrisKnn
{
    public class Form1 : Form
    {
        private List<double[]> listaCech = new List<double[]>();
        private List<int> listaKlas = new List<int>();

        private Button przyciskWczytaj;
        private ComboBox comboBoxMetryka;
        private NumericUpDown numericUpDownK;
        private Button przyciskOblicz;
        private DataGridView gridWyniki;
        private StatusStrip statusStrip;
        private ToolStripStatusLabel toolStripStatusLabel;

        public Form1()
        {
            ZbudujInterfejs();
        }

        private void ZbudujInterfejs()
        {
            this.Text = "K-NN – Klasyfikator Iris";
            this.Size = new Size(800, 600);
            this.StartPosition = FormStartPosition.CenterScreen;

            przyciskWczytaj = new Button
            {
                Text = "Wczytaj dane...",
                Location = new Point(10, 10),
                Size = new Size(120, 30)
            };
            przyciskWczytaj.Click += Przyciski_Click;
            this.Controls.Add(przyciskWczytaj);

            var lblMetryka = new Label
            {
                Text = "Metryka:",
                Location = new Point(150, 17),
                AutoSize = true
            };
            this.Controls.Add(lblMetryka);

            comboBoxMetryka = new ComboBox
            {
                Location = new Point(210, 12),
                Size = new Size(150, 24),
                DropDownStyle = ComboBoxStyle.DropDownList,
                Enabled = false
            };
            comboBoxMetryka.Items.AddRange(new[] {
                "Euklidesowa", "Manhattan", "Czebyszew", "Minkowski (p=3)"
            });
            comboBoxMetryka.SelectedIndex = 0;
            this.Controls.Add(comboBoxMetryka);

            var lblK = new Label
            {
                Text = "k:",
                Location = new Point(380, 17),
                AutoSize = true
            };
            this.Controls.Add(lblK);

            numericUpDownK = new NumericUpDown
            {
                Location = new Point(400, 12),
                Size = new Size(60, 24),
                Minimum = 1,
                Maximum = 150,
                Value = 3,
                Enabled = false
            };
            this.Controls.Add(numericUpDownK);

            przyciskOblicz = new Button
            {
                Text = "Oblicz",
                Location = new Point(480, 10),
                Size = new Size(80, 30),
                Enabled = false
            };
            przyciskOblicz.Click += Przyciski_Click;
            this.Controls.Add(przyciskOblicz);

            gridWyniki = new DataGridView
            {
                Location = new Point(10, 50),
                Size = new Size(760, 480),
                ReadOnly = true,
                AllowUserToAddRows = false,
                RowHeadersVisible = false,
                AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill
            };

            gridWyniki.Columns.Add("Sample", "Próbka");
            gridWyniki.Columns.Add("Actual", "Rzeczywista");
            gridWyniki.Columns.Add("Predicted", "Przewidziana");
            gridWyniki.Columns.Add("Status", "Status");
            this.Controls.Add(gridWyniki);

            statusStrip = new StatusStrip();
            toolStripStatusLabel = new ToolStripStatusLabel();
            statusStrip.Items.Add(toolStripStatusLabel);
            statusStrip.Dock = DockStyle.Bottom;
            this.Controls.Add(statusStrip);
        }

        private void Przyciski_Click(object sender, EventArgs e)
        {
            if (sender == przyciskWczytaj)
            {
                using (var dlg = new OpenFileDialog())
                {
                    dlg.Filter = "Tekstowy (*.txt;*.csv)|*.txt;*.csv|Wszystkie|*.*";
                    dlg.Title = "Wybierz plik Iris";
                    if (dlg.ShowDialog() != DialogResult.OK) return;
                    if (!WczytajZbiorDanych(dlg.FileName))
                    {
                        MessageBox.Show("Błąd formatu pliku.", "Error",
                                        MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return;
                    }
                }

                NormalizujCechy();

                comboBoxMetryka.Enabled = true;
                numericUpDownK.Enabled = true;
                przyciskOblicz.Enabled = true;

                toolStripStatusLabel.Text =
                    $"Wczytano {listaCech.Count} rekordów (dane znormalizowane)";
                gridWyniki.Rows.Clear();
            }
            else if (sender == przyciskOblicz)
            {
                int k = (int)numericUpDownK.Value;
                int metric = comboBoxMetryka.SelectedIndex;

                gridWyniki.Rows.Clear();
                int correct = 0, n = listaCech.Count;

                for (int i = 0; i < n; i++)
                {
                    var testV = listaCech[i];
                    int actual = listaKlas[i];

                    var distances = new List<(double d, int cls)>();
                    for (int j = 0; j < n; j++)
                        if (j != i)
                            distances.Add((ObliczOdleglosc(testV, listaCech[j], metric),
                                           listaKlas[j]));

                    var nearest = distances.OrderBy(x => x.d).Take(k);
                    
                    var vote = nearest
                                .GroupBy(x => x.cls)
                                .OrderByDescending(g => g.Count())
                                .ToList();
                    int predicted = vote[0].Key;
                    bool ok = (predicted == actual);
                    if (vote.Count > 1 && vote[0].Count() == vote[1].Count())
                        ok = false; 
                    if (ok) correct++;

                    gridWyniki.Rows.Add(
                        i + 1,
                        actual,
                        predicted,
                        ok ? "OK" : "BŁĄD"
                    );
                }

                double acc = correct * 100.0 / n;
                toolStripStatusLabel.Text =
                    $"Poprawnych: {correct}/{n}  Dokładność: {acc:0.00}%";
            }
        }
